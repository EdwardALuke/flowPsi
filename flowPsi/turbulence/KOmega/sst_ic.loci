#include <Loci.h>
#include <Tools/stream.h>
#include "flowTypes.h"
#include "flowPsiIO.h"

$include "flowPsi.lh"
$include "kOmega.lh"


namespace flowPsi {

  $rule pointwise(k_ic<-vol),constraint(geom_cells,TurbulentSimulation) {
    $k_ic = 1e-3 ;
  }

  $rule pointwise(w_ic<-vol),constraint(geom_cells,TurbulentSimulation) {
    $w_ic = 100 ;
  }
  // // Initial conditions for general cells
  // $type k_ic store<real > ;
  // $type w_ic store<real > ;

  // $type icRegionInfo blackbox<ICparsedInitRegion> ;

  // $rule pointwise(w_ic,k_ic<-icRegionInfo,cellcenter,qvi),
  //   constraint(geom_cells,SST_BSL_KW) {
  //   double k,w ;
  //   $icRegionInfo.defaultState.get_k_omega(k,w) ;
  //   for(size_t j=0;j<$icRegionInfo.fluidRegions.size();++j) {
  //     if($icRegionInfo.fluidRegions[j].geomTestFunc->inGeomPt($cellcenter)) {
  //       $icRegionInfo.fluidRegions[j].regionState.get_k_omega(k,w) ;
  //     }
  //   }
    
  //   $k_ic = k ;
  //   $w_ic = w ;
  // }

  // $type k_ic store<real> ;
  // $type rho_ic store<real> ;
  // $type tmuu_ic store<real> ;

  // $rule pointwise(ic_file::w_ic<-k_ic,rho_ic,tmuu_ic),
  //   constraint(geom_cells,k_ic,tmuu_ic,SST_BSL_KW) {
  //   const real wic = ($tmuu_ic <= 0.0)?1.0:($rho_ic*$k_ic/$tmuu_ic) ;
  //   $w_ic =  wic ;
  // }

}
